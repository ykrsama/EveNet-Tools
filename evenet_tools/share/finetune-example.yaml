platform:
  data_parquet_dir: cache/data
  number_of_workers: 1 # Adjust based on your system
  resources_per_worker: {
    "CPU": 1,
    "GPU": 1,
  } # Adjust based on your system
  batch_size: 4 # training batch size per worker
  prefetch_batches: 1 # Number of batches to prefetch
  # Enable GPU if available and desired
  use_gpu: true

logger:
  wandb:
    project: "EveNet"
    run_name: &logger_name "Pretrain"
    tags: ["EveNet"]
    simplified: false # If true, all metrics will be saved locally and only final metrics will be logged to wandb
  local:
    save_dir: cache/log
    name: *logger_name
    version: "v1"


options:
  default: options/options.yaml

  # overwrites
  Training:
    total_epochs: 50 # total epochs for the whole training
    epochs: 10 # epochs for this run
    model_checkpoint_save_path: cache/checkpoint
    # Path to a checkpoint to resume training from, or null to start fresh
    model_checkpoint_load_path: null
    # If you want to load a pre-trained model for fine-tuning, specify the path
    pretrain_model_load_path: null

    diffusion_every_n_epochs: 4 # how often to run diffusion
    diffusion_every_n_steps: 1 # how often to run diffusion inside the valid epoch
    eval_metrics_every_n_epochs: 1 # how often to run evaluation metrics

    # see more details in options/options.yaml
    Components:
      Classification:
        include: true

      Regression:
        include: false

      Assignment:
        include: false

      Segmentation:
        include: false
        use_full_mask: true

      GlobalGeneration:
        include: false
        diffusion_steps: 2

      ReconGeneration:
        include: true
        diffusion_steps: 2

      TruthGeneration:
        include: true
        diffusion_steps: 2

    EarlyStopping:
      patience: 100
      min_delta: 0.0
      monitor: "lr-body"
      mode: "min"
      verbose: true

    EMA:
      enable: true               # Enable or disable EMA
      decay: 0.999               # EMA decay rate
      start_epoch: 0             # Start updating EMA after this epoch
      update_every_n_steps: 1    # Update EMA every N steps

      replace_model_after_load: true    # After loading checkpoint, copy EMA weights into model
      replace_model_at_end: false         # At training end, copy EMA weights into model (will not save EMA weights)


  Dataset:
    dataset_limit: 1.0
    normalization_file: cache/data/normalization.pt # Path to normalization file
    val_split: [0.95, 1.0]

network:
  default: network/network-20M.yaml

  # remove feature drop
  Body:
    PET:
      feature_drop: 0.0
  ReconGeneration:
    feature_drop: 0.0
  TruthGeneration:
    feature_drop: 0.0


event_info:
  default: event_info/multi_process.yaml

  # overwrites
  # ...

resonance:
  default: resonance/standard_model.yaml

  # overwrites
  # ...
